<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MingKai&#39;s Blog</title>
  
  <subtitle>Hello</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mkstudying.cn/"/>
  <updated>2018-09-08T09:32:31.480Z</updated>
  <id>http://mkstudying.cn/</id>
  
  <author>
    <name>MingKai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法简介</title>
    <link href="http://mkstudying.cn/2018/09/08/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://mkstudying.cn/2018/09/08/排序算法/</id>
    <published>2018-09-08T09:08:23.000Z</published>
    <updated>2018-09-08T09:32:31.480Z</updated>
    
    <content type="html"><![CDATA[<h3 id="排序算法简介"><a href="#排序算法简介" class="headerlink" title="排序算法简介"></a>排序算法简介</h3><p>首先看一下八大排序算法的关系：</p><p><img src="/2018/09/08/排序算法/p-1.jpg" alt="突突突"></p><p>从图中可以看到 八大排序算法是属于内部排序，而内部排序是在内存中进行的。</p><p>那么这些排序算法哪个好用呢？_?</p><p>然后来看一下这些算法的优劣：（来自维基百科(●ˇ∀ˇ●)）</p><p><img src="/2018/09/08/排序算法/p-2.jpg" alt="突突突"></p><ul><li>均按从小到大排列 </li><li>k代表数值中的”数位”个数</li><li>n代表数据规模 </li><li>m代表数据的最大值减最小值</li></ul><p>所以选择算法的时候要考虑这些：</p><p>1.数据的规模</p><p>2.数据的类型</p><p>3.数据的初始顺序</p><p>一般来说，数据规模小时，可以选择直接插入排序和冒泡排序。</p><p>数据初始顺序如果比较有序时，使用快速排序也没其他的好。。。因为它会有一些不必要的步骤。</p><p>所以要根据情况来分析算法的优劣。</p><p>并且这些排序算法还可以改进。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;排序算法简介&quot;&gt;&lt;a href=&quot;#排序算法简介&quot; class=&quot;headerlink&quot; title=&quot;排序算法简介&quot;&gt;&lt;/a&gt;排序算法简介&lt;/h3&gt;&lt;p&gt;首先看一下八大排序算法的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/09/08/排序算法/p-1.
      
    
    </summary>
    
      <category term="后端" scheme="http://mkstudying.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="数据结构与算法" scheme="http://mkstudying.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java中强引用，软引用，弱引用，虚引用的了解</title>
    <link href="http://mkstudying.cn/2018/09/06/Java%E4%B8%AD%E5%BC%BA%E5%BC%95%E7%94%A8%EF%BC%8C%E8%BD%AF%E5%BC%95%E7%94%A8%EF%BC%8C%E5%BC%B1%E5%BC%95%E7%94%A8%EF%BC%8C%E8%99%9A%E5%BC%95%E7%94%A8%E7%9A%84%E4%BA%86%E8%A7%A3/"/>
    <id>http://mkstudying.cn/2018/09/06/Java中强引用，软引用，弱引用，虚引用的了解/</id>
    <published>2018-09-06T15:43:32.000Z</published>
    <updated>2018-09-06T15:45:37.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java引用介绍"><a href="#Java引用介绍" class="headerlink" title="Java引用介绍"></a>Java引用介绍</h3><p> Java在JDK 1.2 对引用的概念进行了扩充，主要是为了更好的进行内存管理而设置的一套机制，粗俗的说就是不同的引用垃圾回收的力度不同。</p><blockquote><p>强引用 &gt; 软引用 &gt; 弱引用  &gt; 虚引用</p></blockquote><h3 id="强引用-StrongReference"><a href="#强引用-StrongReference" class="headerlink" title="强引用 StrongReference"></a>强引用 StrongReference</h3><blockquote><p> 强引用是最普遍的引用，一个对象如果被强引用那么垃圾回收器就永远不会收集,即使是OutOfMemory。类似于GirlFriend g = new GirlFriend()这类引用就是强引用;</p></blockquote><h3 id="软引用-SoftReference"><a href="#软引用-SoftReference" class="headerlink" title="软引用 SoftReference"></a>软引用 SoftReference</h3><blockquote><p>软引用是在JVM内存即将不足时才会清理回收的对象，用来描述还有用但不是必须存在的对象。软引用可以使用java.lang.ref.SoftReference来实现</p></blockquote><h3 id="弱引用-WeakReference"><a href="#弱引用-WeakReference" class="headerlink" title="弱引用 WeakReference"></a>弱引用 WeakReference</h3><blockquote><p>弱引用存在感比软引用还要弱一些，是JVM在GC时只要发现弱引用就会回收。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。同样也有java.lang.ref.WeakReference</p></blockquote><h3 id="虚引用-PhantomReference"><a href="#虚引用-PhantomReference" class="headerlink" title="虚引用 PhantomReference"></a>虚引用 PhantomReference</h3><blockquote><p>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。虚引用职能在其指向的对象从内存中移除掉之后才会加入到引用队列</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java引用介绍&quot;&gt;&lt;a href=&quot;#Java引用介绍&quot; class=&quot;headerlink&quot; title=&quot;Java引用介绍&quot;&gt;&lt;/a&gt;Java引用介绍&lt;/h3&gt;&lt;p&gt; Java在JDK 1.2 对引用的概念进行了扩充，主要是为了更好的进行内存管理而设置的一套
      
    
    </summary>
    
      <category term="后端" scheme="http://mkstudying.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="http://mkstudying.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中String与StringBuilder</title>
    <link href="http://mkstudying.cn/2018/08/15/Java%E4%B8%ADString%E4%B8%8EStringBuilder/"/>
    <id>http://mkstudying.cn/2018/08/15/Java中String与StringBuilder/</id>
    <published>2018-08-15T15:45:29.000Z</published>
    <updated>2018-08-15T15:46:47.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>Java中String是经常用到的一个类，点开String源码可以看到，String是 final类，char数组value也是final类型，所以说String是不可变对象，一旦创建就不可更改，那么看一下下面这个代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String s = <span class="string">"123"</span>;</span><br><span class="line">s+=<span class="string">"456"</span>;</span><br></pre></td></tr></table></figure></p><p>看到这段代码会使人感觉String是可变的，但JVM是这样做的：首先创建s对象，并赋值为123，之后到下一句会再创建一个s对象，赋值为123456，并将第一个s对象进行回收。所以这相当于是两个不同的对象了。</p><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>查看StringBuilder的源码，会发现默认构造函数会指定一个数值为16，这个默认数值是容量为16字符数组。一旦超出这个容量会使用Arrays.copyOf()进行成倍扩容，当然这样会影响性能，所以最好在创建StringBuilder对象时指定一个大小。</p><h3 id="String与StringBuilder拼接比较"><a href="#String与StringBuilder拼接比较" class="headerlink" title="String与StringBuilder拼接比较"></a>String与StringBuilder拼接比较</h3><p>StringBuilder要比String快，通常字符串拼接使用StringBuilder来实现。</p><p>但也不是所有情况都使用StringBuilder好，例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"123"</span> + <span class="string">"456"</span> + <span class="string">"789"</span>;</span><br><span class="line"></span><br><span class="line">String str2 = <span class="keyword">new</span> StringBuilder(<span class="string">"123"</span>).append(<span class="string">"456"</span>).append(<span class="string">"789"</span>).toString();</span><br></pre></td></tr></table></figure></p><p>这种情况的String相当于Strnig str1 = “123456789”，而StringBuilder需要调用多次append()方法。<br>如果是下面这种情况，在for循环中，对字符串进行拼接的话StringBuilder当然更胜一筹：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder s = <span class="keyword">new</span> StringBuilder(<span class="string">"12345"</span>);</span><br><span class="line">String ss = <span class="string">"12345"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    s.append(<span class="string">"12345"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    ss+=<span class="string">"12345"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我做了个小测试StringBuilder完成只需要5毫秒，而String完成则需要500多毫秒，原因也很简单，在第一个例子里也有说到，String拼接时，会创建一个新的String对象，而在这个例子中会有大量的创建回收String对象。所以像这种有大量拼接操作的时候优先选择StringBuilder。<br>ps：当然如果使用IDEA这些操作都会有警告的 所以请不要忽视任何一个警告 :P</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h3&gt;&lt;p&gt;Java中String是经常用到的一个类，点开String源码可以看到，String是 final类，cha
      
    
    </summary>
    
      <category term="后端" scheme="http://mkstudying.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Java" scheme="http://mkstudying.cn/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>JPA动态条件查询</title>
    <link href="http://mkstudying.cn/2018/08/09/JPA%E5%8A%A8%E6%80%81%E6%9D%A1%E4%BB%B6%E6%9F%A5%E8%AF%A2/"/>
    <id>http://mkstudying.cn/2018/08/09/JPA动态条件查询/</id>
    <published>2018-08-09T15:18:30.000Z</published>
    <updated>2018-08-09T15:20:37.724Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JPA动态条件查询"><a href="#JPA动态条件查询" class="headerlink" title="JPA动态条件查询"></a>JPA动态条件查询</h3><p>最近使用JPA做ORM框架，JPA是具有面向对象思想的，比如Entity实体类与数据库表对应。</p><p>JPA在查询时刚开始用很不习惯，虽然也可以使用@Query写原生SQL。</p><h5 id="如果使用JPA提供的接口查询可以使用JpaSpecificationExecutor"><a href="#如果使用JPA提供的接口查询可以使用JpaSpecificationExecutor" class="headerlink" title="如果使用JPA提供的接口查询可以使用JpaSpecificationExecutor"></a>如果使用JPA提供的接口查询可以使用JpaSpecificationExecutor</h5><p>先看一下JPA提供的接口：  </p><ol><li>Repository：最顶层的接口，是一个空的接口，目的是为了统一所有Repository的类型，且能让组件扫描的时候自动识别。</li><li>CrudRepository ：是Repository的子接口，提供CRUD的功能</li><li>PagingAndSortingRepository：是CrudRepository的子接口，添加分页和排序的功能</li><li>JpaRepository：是PagingAndSortingRepository的子接口，增加了一些实用的功能，比如：批量操作等。</li><li>JpaSpecificationExecutor：用来做负责查询的接口</li><li>Specification：是Spring Data JPA提供的一个查询规范，要做复杂的查询，只需围绕这个规范来设置查询条件即可</li></ol><h5 id="我们可以看一下JpaSpecificationExecutor接口中有带有条件查询或是分页查询的方法"><a href="#我们可以看一下JpaSpecificationExecutor接口中有带有条件查询或是分页查询的方法" class="headerlink" title="我们可以看一下JpaSpecificationExecutor接口中有带有条件查询或是分页查询的方法"></a>我们可以看一下JpaSpecificationExecutor接口中有带有条件查询或是分页查询的方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Optional&lt;T&gt; <span class="title">findOne</span><span class="params">(@Nullable Specification&lt;T&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(@Nullable Specification&lt;T&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(@Nullable Specification&lt;T&gt; var1, Pageable var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(@Nullable Specification&lt;T&gt; var1, Sort var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(@Nullable Specification&lt;T&gt; var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里Specification接口可以构造出查询条件，Pageable接口可以构造出分页条件</p><p>然后我们在Repository中继承JpaSpecificationExecutor接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HiJPARepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">HiJPA</span>, <span class="title">Long</span>&gt;, <span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">HiJPA</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们构造一个查询<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Specification query = (root, criteriaQuery, criteriaBuilder) -&gt; &#123;</span><br><span class="line">    List&lt;Predicate&gt; predicates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">//if判断参数是否为空可以实现动态查询效果</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != type &amp;&amp; <span class="number">0</span> &lt;= type) &#123;</span><br><span class="line">        <span class="comment">//相当于SQL中 type = #&#123;type&#125;</span></span><br><span class="line">        predicates.add(criteriaBuilder.equal(root.get(<span class="string">"type"</span>), type));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != userId &amp;&amp; <span class="number">0</span> &lt;= userId) &#123;</span><br><span class="line">        predicates.add(criteriaBuilder.equal(root.get(<span class="string">"userId"</span>), userId));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != bookId &amp;&amp; <span class="number">0</span> &lt;= bookId) &#123;</span><br><span class="line">        predicates.add(criteriaBuilder.equal(root.get(<span class="string">"bookId"</span>), bookId));</span><br><span class="line">    &#125;</span><br><span class="line">    criteriaQuery.where(criteriaBuilder.and(predicates.toArray(<span class="keyword">new</span> Predicate[predicates.size()])));</span><br><span class="line">    <span class="comment">//使用orderBy进行排序  相当于SQL中 order by id desc</span></span><br><span class="line">    criteriaQuery.orderBy(criteriaBuilder.desc(root.get(<span class="string">"id"</span>)));</span><br><span class="line">    <span class="keyword">return</span> criteriaQuery.getRestriction();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>然后使用List<t> findAll(@Nullable Specification<t> var1);方法将我们构造Specification传进去来进行查询，返回一个List列表。</t></t></p><p>当然我也是刚开始用JPA，更多的可以查看Spring的官方文档：<a href="https://docs.spring.io/spring-data/jpa/docs/2.1.0.RC1/reference/html/#repositories.limit-query-result" target="_blank" rel="noopener">https://docs.spring.io/spring-data/jpa/docs/2.1.0.RC1/reference/html/#repositories.limit-query-result</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JPA动态条件查询&quot;&gt;&lt;a href=&quot;#JPA动态条件查询&quot; class=&quot;headerlink&quot; title=&quot;JPA动态条件查询&quot;&gt;&lt;/a&gt;JPA动态条件查询&lt;/h3&gt;&lt;p&gt;最近使用JPA做ORM框架，JPA是具有面向对象思想的，比如Entity实体类与数据
      
    
    </summary>
    
      <category term="后端" scheme="http://mkstudying.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Spring" scheme="http://mkstudying.cn/tags/Spring/"/>
    
      <category term="JPA" scheme="http://mkstudying.cn/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>在Jackson自定义序列化中使用@Autowired</title>
    <link href="http://mkstudying.cn/2018/08/07/%E5%9C%A8Jackson%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%AD%E4%BD%BF%E7%94%A8-Autowired/"/>
    <id>http://mkstudying.cn/2018/08/07/在Jackson自定义序列化中使用-Autowired/</id>
    <published>2018-08-07T15:17:07.000Z</published>
    <updated>2018-08-07T15:32:23.643Z</updated>
    
    <content type="html"><![CDATA[<h3 id="在Jackson自定义序列化中使用-Autowired"><a href="#在Jackson自定义序列化中使用-Autowired" class="headerlink" title="在Jackson自定义序列化中使用@Autowired"></a>在Jackson自定义序列化中使用@Autowired</h3><p> 开始直接使用@Autowired自动装配Bean时，总是null。<br> 后来发现原来JsonSerializer初始化发生Spring自动装配之后，这样就会发生冲突。<br> 解决方案有：</p><h5 id="创建两个构造器"><a href="#创建两个构造器" class="headerlink" title="创建两个构造器"></a>创建两个构造器</h5><p> 我们可以创建两个构造器，一个用来Spring构造函数注入Bean，另一个用来JsonSerializer的初始化，这样就可以解决这个问题。下面是一个例子将String参数序列化时转为List，代码如下：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringToByteListSerialize</span> <span class="keyword">extends</span> <span class="title">JsonSerializer</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ObjectMapper objectMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Spring自动装配构造函数</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringToByteListSerialize</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line">        StringToByteListSerialize.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//JsonSerializer初始化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StringToByteListSerialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">serialize</span><span class="params">(String s, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != s) &#123;</span><br><span class="line">            JavaType javaType = objectMapper.getTypeFactory().constructParametricType(List.class, Byte.class);</span><br><span class="line">            List&lt;Byte&gt; lst = objectMapper.readValue(s, javaType);</span><br><span class="line">            jsonGenerator.writeObject(lst);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>通过这次问题，确实感觉到了基础知识的重要性，比如说Spring框架Bean，依赖注入、Java初始化等基础知识。可能你会用一些框架做出东西，但是要做好或是遇到问题能快速定位，这就需要基础知识牢固，再者如果基础知识不行连源码都看不懂。所以基础知识很重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;在Jackson自定义序列化中使用-Autowired&quot;&gt;&lt;a href=&quot;#在Jackson自定义序列化中使用-Autowired&quot; class=&quot;headerlink&quot; title=&quot;在Jackson自定义序列化中使用@Autowired&quot;&gt;&lt;/a&gt;在Jack
      
    
    </summary>
    
      <category term="后端" scheme="http://mkstudying.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="Spring" scheme="http://mkstudying.cn/tags/Spring/"/>
    
      <category term="Jackson" scheme="http://mkstudying.cn/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>es初次使用</title>
    <link href="http://mkstudying.cn/2018/08/01/es%E5%88%9D%E6%AC%A1%E4%BD%BF%E7%94%A8/"/>
    <id>http://mkstudying.cn/2018/08/01/es初次使用/</id>
    <published>2018-08-01T11:16:05.000Z</published>
    <updated>2018-08-07T15:32:09.251Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Elasticsearch是一个高度可伸缩的开源全文搜索和分析引擎。它允许你以近实时的方式快速存储、搜索和分析大量的数据。它通常被用作基础的技术来赋予应用程序复杂的搜索特性和需求。</p></blockquote><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="集群-Cluster"><a href="#集群-Cluster" class="headerlink" title="集群(Cluster)"></a>集群(Cluster)</h2><blockquote><p>一个集群由多个节点（Node）组成，通过所有的节点来存储数据，并且每个集群都有唯一的名字，默认是“elasticsearch”。</p></blockquote><h2 id="节点-Node"><a href="#节点-Node" class="headerlink" title="节点(Node)"></a>节点(Node)</h2><blockquote><p>一个节点是一个服务器，用来存储数据，并参与集群的索引与搜索。是组成集群的一部分，每个节点又一个唯一标识的名称UUID。</p></blockquote><h2 id="索引-index"><a href="#索引-index" class="headerlink" title="索引(index)"></a>索引(index)</h2><blockquote><p>是具有相似特性文档的集合，每个索引也有唯一的名字，可以对文档对数据进行搜索，更新，删除等操作。</p></blockquote><h2 id="类型-type"><a href="#类型-type" class="headerlink" title="类型(type)"></a>类型(type)</h2><blockquote><p>类型是索引中的一个分类，可以在索引中存储不同类型的文档。现在已不可能在同一个索引中创建多个类型，并且整个类型的概念将会在未来的版本中移除。</p></blockquote><p>6.0.0版本以后已不推荐使用:<br>以下翻译官方文档:</p><blockquote><p>一开始，我们我们谈到 一个 ES的索引类似于关系型数据库中的数据库，一个映射类型则相当于关系型数据库中的一张表。<br>这是一个错误的类比，导致了错误的假设。在一个关系型数据库中，表之间是相互独立的。一个表中的列与另一个表中同名的列没有关系。然而在映射类型中却不是这样的。<br>在一个Elasticsearch的索引中，有相同名称字段的不同映射类型在Lucene内部是由同一个字段支持的。换言之，看下面的这个例子，user 类型中的 user_name字段和tweet类型中的user_name字段实际上是被存储在同一个字段中，而且两个user_name字段在这两种映射类型中都有相同的定义（如类型都是 text或者都是date）。<br>这会导致一些问题，比如，当你希望在一个索引中的两个映射类型，一个映射类型中的 deleted 字段映射为一个日期数据类型的字段，而在另一个映射类型中的deleted字段映射为一个布尔数据类型的字段，这就会失败。<br>最重要的是，在一个索引中存储那些有很少或没有相同字段的实体会导致稀疏数据，并且干扰Lucene有效压缩文档的能力。</p></blockquote><h2 id="文档-Document"><a href="#文档-Document" class="headerlink" title="文档(Document)"></a>文档(Document)</h2><blockquote><p>是一个可被索引的基础单元</p></blockquote><h2 id="分片和复制-Shards-amp-Replicas"><a href="#分片和复制-Shards-amp-Replicas" class="headerlink" title="分片和复制(Shards &amp; Replicas)"></a>分片和复制(Shards &amp; Replicas)</h2><blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Elasticsearch是一个高度可伸缩的开源全文搜索和分析引擎。它允许你以近实时的方式快速存储、搜索和分析大量的数据。它通常被用作基础的技术来赋予应用程序复杂的搜索特性和需求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;基础概念&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="后端" scheme="http://mkstudying.cn/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="elasticsearch" scheme="http://mkstudying.cn/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://mkstudying.cn/2018/07/10/test-my-site/"/>
    <id>http://mkstudying.cn/2018/07/10/test-my-site/</id>
    <published>2018-07-10T10:01:27.551Z</published>
    <updated>2018-08-07T15:32:40.874Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: Hello World<br>date: 2018-07-09 16:48:39<br>tags:</p><ul><li>test</li></ul><hr><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="你好啊"><a href="#你好啊" class="headerlink" title="你好啊"></a>你好啊</h3><blockquote><p>ni</p></blockquote><h4 id="nihao"><a href="#nihao" class="headerlink" title="nihao"></a>nihao</h4><h3 id="Hi"><a href="#Hi" class="headerlink" title="Hi"></a>Hi</h3><pre><code class="java"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>{    啊实打实的}</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: Hello World&lt;br&gt;date: 2018-07-09 16:48:39&lt;br&gt;tags:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-Worl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://mkstudying.cn/2018/07/09/hello-world/"/>
    <id>http://mkstudying.cn/2018/07/09/hello-world/</id>
    <published>2018-07-09T06:34:29.970Z</published>
    <updated>2018-07-09T06:34:29.971Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
